// <auto-generated />
using System;
using Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AplicationDbContext))]
    partial class AplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.ApprovedLoan", b =>
                {
                    b.Property<int>("ApprovedLoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ApprovedLoanId"));

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CapitalAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InstallamentId")
                        .HasColumnType("integer");

                    b.Property<float>("InterestAmount")
                        .HasColumnType("real");

                    b.Property<float>("InterestRate")
                        .HasColumnType("real");

                    b.Property<int>("LoanId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("NextDueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TermId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalFeeAmount")
                        .HasColumnType("numeric");

                    b.HasKey("ApprovedLoanId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LoanId")
                        .IsUnique();

                    b.HasIndex("TermId")
                        .IsUnique();

                    b.ToTable("ApprovedLoans");
                });

            modelBuilder.Entity("Core.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Core.Entities.Installment", b =>
                {
                    b.Property<int>("InstallmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InstallmentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("ApprovedLoanId")
                        .HasColumnType("integer");

                    b.Property<decimal>("InstallmentAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("InstallmentDue")
                        .HasColumnType("integer");

                    b.Property<string>("InstallmentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TermId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.HasKey("InstallmentId");

                    b.HasIndex("ApprovedLoanId")
                        .IsUnique();

                    b.HasIndex("TermId");

                    b.ToTable("Installments");
                });

            modelBuilder.Entity("Core.Entities.LoanRequest", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LoanId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("ApprovedLoanId")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("Months")
                        .HasColumnType("integer");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TermId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoanId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TermId")
                        .IsUnique();

                    b.ToTable("LoanRequests");
                });

            modelBuilder.Entity("Core.Entities.PaymentInstallment", b =>
                {
                    b.Property<int>("PaymentInstallmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentInstallmentId"));

                    b.Property<int>("InstallamentsToPay")
                        .HasColumnType("integer");

                    b.Property<int>("InstallmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("NextDueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PaymentInstallmentId");

                    b.HasIndex("InstallmentId")
                        .IsUnique();

                    b.ToTable("PaymentInstallments");
                });

            modelBuilder.Entity("Core.Entities.TermIR", b =>
                {
                    b.Property<int>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TermId"));

                    b.Property<float>("InterestRate")
                        .HasColumnType("real");

                    b.Property<int>("Months")
                        .HasColumnType("integer");

                    b.HasKey("TermId");

                    b.ToTable("TermIRs");
                });

            modelBuilder.Entity("Core.Entities.ApprovedLoan", b =>
                {
                    b.HasOne("Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.LoanRequest", "Loan")
                        .WithOne("ApprovedLoan")
                        .HasForeignKey("Core.Entities.ApprovedLoan", "LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TermIR", "Term")
                        .WithOne("ApprovedLoan")
                        .HasForeignKey("Core.Entities.ApprovedLoan", "TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Loan");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Core.Entities.Installment", b =>
                {
                    b.HasOne("Core.Entities.ApprovedLoan", "ApprovedLoan")
                        .WithOne("Installament")
                        .HasForeignKey("Core.Entities.Installment", "ApprovedLoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TermIR", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedLoan");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Core.Entities.LoanRequest", b =>
                {
                    b.HasOne("Core.Entities.Customer", "Customer")
                        .WithMany("Loans")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TermIR", "Term")
                        .WithOne("LoanRequest")
                        .HasForeignKey("Core.Entities.LoanRequest", "TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("Core.Entities.PaymentInstallment", b =>
                {
                    b.HasOne("Core.Entities.Installment", "Installment")
                        .WithOne("PaymentInstallment")
                        .HasForeignKey("Core.Entities.PaymentInstallment", "InstallmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Installment");
                });

            modelBuilder.Entity("Core.Entities.ApprovedLoan", b =>
                {
                    b.Navigation("Installament")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Customer", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("Core.Entities.Installment", b =>
                {
                    b.Navigation("PaymentInstallment")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.LoanRequest", b =>
                {
                    b.Navigation("ApprovedLoan")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.TermIR", b =>
                {
                    b.Navigation("ApprovedLoan")
                        .IsRequired();

                    b.Navigation("LoanRequest")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
